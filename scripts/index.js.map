{"version":3,"sources":["scripts/index.ts"],"names":["createLink","url","type","includes","container","conferences","dayContainer","lastDay","SCHEDULE","company","name","logo","time","Date","links","Conference","schedule","_classCallCheck","this","el","concat","mapHTML","link","getTime","Intl","DateTimeFormat","undefined","hour","minute","timeZoneName","format","mapFn","map","trim","join","Number","day","weekday","month","element","insertAdjacentHTML","document","getElementById","c","forEach","dayOfMonth","getDayOfMonth","createElement","classList","add","append","getDayString","appendTo","notifications","checkbox","onchange","e","currentTarget","checked","registerNotifications","unregisterNotifications","Notification","permission","requestPermission","then","result","conference","now","id","setTimeout","vibrate","onclick","location","href","push","clearTimeout","splice","length"],"mappings":"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","file":"index.js","sourcesContent":["interface ICompany {\n  name: string\n  logo: string\n}\n\nconst EA = {\n  name: 'EA Play',\n  logo: 'ea.svg',\n}\n\nconst MICROSOFT = {\n  name: 'Microsoft',\n  logo: 'microsoft.svg',\n}\n\nconst BETHESDA = {\n  name: 'Bethesda',\n  logo: 'bethesda.svg',\n}\n\nconst DEVOLVER_DIGITAL = {\n  name: 'Devolver Digital',\n  logo: 'devolver_digital.svg',\n}\n\nconst UPLOADVR = {\n  name: 'UploadVR',\n  logo: 'upload_vr.svg',\n}\n\nconst PC_GAMING = {\n  name: 'PC Gaming Show',\n  logo: 'pc_gaming.svg',\n}\n\nconst LIMITED_RUN = {\n  name: 'Limited Run',\n  logo: 'limited_run.svg',\n}\n\nconst UBISOFT = {\n  name: 'Ubisoft',\n  logo: 'ubisoft.svg',\n}\n\nconst KINDA_FUNNY_SHOWCASE = {\n  name: 'Kinda Funny Showcase',\n  logo: 'kinda_funny_showcase.svg',\n}\n\nconst SQUARE_ENIX = {\n  name: 'Square Enix',\n  logo: 'square_enix.svg',\n}\n\nconst NINTENDO_DIRECT = {\n  name: 'Nintendo Direct',\n  logo: 'nintendo_direct.svg',\n}\n\ntype LinkType = 'youtube' | 'twitch' | 'mixer' | 'general'\ninterface ISchedule {\n  readonly company: ICompany\n  readonly time: Date\n  readonly links: ReadonlyArray<{\n    type: LinkType\n    url: string\n  }>\n}\n\nconst createLink = (url: string) => {\n  let type: LinkType = 'general'\n\n  if (url.includes('youtube')) {\n    type = 'youtube'\n  }\n  if (url.includes('twitch')) {\n    type = 'twitch'\n  }\n  if (url.includes('mixer')) {\n    type = 'mixer'\n  }\n\n  return {\n    type,\n    url,\n  }\n}\n\nconst SCHEDULE: ISchedule[] = [\n  {\n    company: EA,\n    time: new Date('June 8 2019 16:30 UTC'),\n    links: [\n      createLink('https://www.twitch.tv/ea'),\n      createLink('https://www.youtube.com/channel/UCIHBybdoneVVpaQK7xMz1ww'),\n    ],\n  },\n  {\n    company: MICROSOFT,\n    time: new Date('June 9 2019 4:00 pm EDT'),\n    links: [createLink('https://mixer.com/xbox')],\n  },\n  {\n    company: BETHESDA,\n    time: new Date('June 9 2019 8:30 pm EDT'),\n    links: [\n      createLink('https://www.twitch.tv/Bethesda'),\n      createLink('https://www.youtube.com/Bethesda'),\n      createLink('https://mixer.com/Bethesda'),\n    ],\n  },\n  {\n    company: DEVOLVER_DIGITAL,\n    time: new Date('June 9 2019 11:00 pm EDT'),\n    links: [\n      createLink('https://www.twitch.tv/devolverdigital'),\n      createLink('https://www.youtube.com/user/pcgamer'),\n      createLink('https://mixer.com/pcgamer'),\n    ],\n  },\n  {\n    company: UPLOADVR,\n    time: new Date('June 10 2019 16:00 UTC'),\n    links: [\n      createLink('https://www.youtube.com/channel/UCqDMvCa1tGak6AmijajiKOw'),\n    ],\n  },\n  {\n    company: PC_GAMING,\n    time: new Date('June 10 2019 17:00 UTC'),\n    links: [createLink('https://www.twitch.tv/pcgamer')],\n  },\n  {\n    company: LIMITED_RUN,\n    time: new Date('June 10 2019 19:00 UTC'),\n    links: [createLink('https://www.twitch.tv/limitedrungames')],\n  },\n  {\n    company: UBISOFT,\n    time: new Date('June 10 2019 20:00 UTC'),\n    links: [\n      createLink('https://www.twitch.tv/ubisoft'),\n      createLink('https://www.youtube.com/user/ubisoft'),\n      createLink('https://mixer.com/pcgamer'),\n    ],\n  },\n  {\n    company: KINDA_FUNNY_SHOWCASE,\n    time: new Date('June 10 2019 23:00 UTC'),\n    links: [createLink('https://www.youtube.com/kindafunnygames')],\n  },\n  {\n    company: SQUARE_ENIX,\n    time: new Date('June 11 2019 01:00 UTC'),\n    links: [createLink('https://e3.square-enix-games.com')],\n  },\n  {\n    company: NINTENDO_DIRECT,\n    time: new Date('June 11 2019 16:00 UTC'),\n    links: [\n      createLink('https://e3.nintendo.com/'),\n      createLink('https://www.youtube.com/channel/UCGIY_O-8vW4rfX98KlMkvRg'),\n    ],\n  },\n]\n\nclass Conference {\n  private schedule: ISchedule\n  private el: string\n\n  constructor(schedule: ISchedule) {\n    this.schedule = schedule\n    this.el = `\n      <div class=\"conference\">\n        <div class=\"company\">${schedule.company.name}</div>\n        <div class=\"lower\">\n          ${this.mapHTML(\n            schedule.links,\n            link => `\n              <a class=\"link ${link.type}\" href=\"${link.url}\" target=\"_blank\" rel=\"noref\">\n                <img src=\"img/${link.type}.svg\" alt=\"${link.type}\"/>\n              </a>\n            `,\n          )}\n          <div class=\"time\">${this.getTime()}</div>\n        </div>\n      </div>\n    `\n  }\n\n  private getTime() {\n    return Intl.DateTimeFormat(undefined, {\n      hour: 'numeric',\n      minute: 'numeric',\n      timeZoneName: 'short',\n    }).format(this.schedule.time)\n  }\n\n  private mapHTML(\n    links: ISchedule['links'],\n    mapFn: (link: ISchedule['links'][number]) => string,\n  ): string {\n    return links\n      .map(link => {\n        const result = mapFn(link)\n        return result.trim()\n      })\n      .join('\\n')\n  }\n\n  public getDayOfMonth() {\n    return Number(\n      Intl.DateTimeFormat(undefined, {\n        day: 'numeric',\n      }).format(this.schedule.time),\n    )\n  }\n\n  public getDayString() {\n    return Intl.DateTimeFormat(undefined, {\n      weekday: 'long',\n      month: 'long',\n      day: 'numeric',\n    }).format(this.schedule.time)\n  }\n\n  public appendTo(element: HTMLElement) {\n    element.insertAdjacentHTML('beforeend', this.el)\n  }\n}\n\nconst updatePage = () => {\n  const container = document.getElementById('container')!\n\n  const conferences = SCHEDULE.map(c => new Conference(c))\n\n  let dayContainer: HTMLElement = null as any\n  let lastDay = -1\n\n  conferences.forEach(c => {\n    const dayOfMonth = c.getDayOfMonth()\n\n    if (lastDay !== dayOfMonth) {\n      lastDay = dayOfMonth\n\n      dayContainer = document.createElement('section')\n      dayContainer.classList.add('day')\n\n      container.append(dayContainer)\n      dayContainer.insertAdjacentHTML(\n        'beforebegin',\n        `<h1 class=\"title\">${c.getDayString()}</h1>`,\n      )\n    }\n\n    c.appendTo(dayContainer)\n  })\n}\n\nupdatePage()\n\nconst notifications: number[] = []\n\nconst checkbox = document.getElementById(\n  'notification-checkbox',\n) as HTMLInputElement\n\ncheckbox.onchange = e => {\n  const { checked } = e.currentTarget as HTMLInputElement\n\n  if (checked) {\n    registerNotifications()\n  } else {\n    unregisterNotifications()\n  }\n}\n\nconst registerNotifications = () => {\n  if (Notification.permission !== 'granted') {\n    Notification.requestPermission().then(result => {\n      if (result === 'granted') {\n        return registerNotifications()\n      }\n\n      checkbox.checked = false\n    })\n  }\n\n  SCHEDULE.forEach(conference => {\n    const time = conference.time.getTime()\n    const now = Date.now()\n\n    if (time <= now) return\n\n    const id = setTimeout(() => {\n      const notification = new Notification(`${conference.company.name}'s E3 has started!`, {\n        vibrate: [500, 500, 500, 500, 500],\n      })\n\n      notification.onclick = () => {\n        location.href = conference.links[0].url\n      }\n    }, time - now)\n\n    notifications.push(id)\n  })\n}\n\nconst unregisterNotifications = () => {\n  notifications.forEach(id => clearTimeout(id))\n  notifications.splice(0, notifications.length)\n}\n"]}